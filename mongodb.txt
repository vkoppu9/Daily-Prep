Section 1 :
***************************
1. Introduction
2. What is MongoDB?
3. Join our Online Community
4. Understanding the MongoDB
5. The key mongodb characteristics
6. Understanding the MongoDB Ecosystem
7. Installing MongoDB
8. MongoDB installation FAQ
9. Time to get started 
10. Shell vs Drivers
11. MongoDB + Clients
12. Course Outline
13. How to get the most out of the course 

Section 2 :
***************************
14. Module introduction
15. Understanding Databases, Collections and Documents
16. The Shell & MongoDB Drivers for different languages
17. Creating Databases and Collections
18. Understanding JSON Data
19. Comparing JSON and BSON
20. Create, Read, Update, Delete (CRUD) and MongoDB
21. Finding, Inserting, Deleting, and Updating Elements
22. Understanding insertMany
23. Diving deeper into finding data
24. update vs updateMany
25. Understanding find() and the Cursor Object
26. Understanding projection
27. Embedded Documents and Arrays
28. Working with Embedded Documents
29. Working with Arrays
30. Accessing Structured Data
31. Wrap up
32. Resources


Section 3 :
***************************
33. Resetting your Database
34. Module Introduction
35. Why do we use schemas?
36. Structuring Documents
37. Data Types - An Overview
38. Data Types in Action
39. Data Types and Limits
40. How to derive your Data Structure - Requirements
41. 
42. 
43. 
44. 
45. 
46. 
47. 
48. 
49. 
50. 
51. 
52. 
53. 
54. 
55. 
56. 







Notes:
***************************

show dbs
use flights
db.flightData.insertOne({})
db.flightData.find().pretty()

create 
insertOne(data, options)
insertMany(data, options)

read
find(filter, options)
findOne(filter, options)

update
updateOne(filter, data, options)
updateMany(filter, data, options)
replaceOne(filter, data, options)

delete 
deleteOne(filter, options)
deleteMany(filter, options)

db.passengers().find().toArray()
db.passengers().find().forEach((passengerData) => {printjson(passengerData)})

projection:
db.passengers.find({}, {name : 1}).pretty()
db.passengers.find({}, {name : 1, _id : 0}).pretty()

db.passengers.findOne({name : "Venkata"}).hobbies
db.flightData.find({"status.description" : "on-time"}).pretty()

Data Types:
Text 
Boolean
Number (int32)
NumberLong (int64)
NumberDecimal
ObjectId
ISODate
Timestamp
Embedded Document
Array

use test
db.dropDatabase()

use companyData
db.companies.insertOne()
